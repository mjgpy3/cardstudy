{"version":3,"sources":["js/decks.json","js/deckList.js","js/card.js","js/main.js"],"names":["module","exports","sideA","name","cards","sideB","renderDeckList","deckList","document","getElementById","row","createElement","className","appendChild","forEach","deck","col","card","content","action","title","createTextNode","body","actionLink","href","renderCard","side","decks","filter","correctCard","text","oppositeSide","previousCard","length","nextCard","cardElem","cardContent","flipLink","previousLink","nextLink","window","addEventListener","event","pieces","queryParams","location","split","map","pair","reduce","res","key","value","parseInt"],"mappings":"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","file":"main.3750d6f3.js","sourceRoot":"..","sourcesContent":["module.exports=[{sideA:\"Greek Word\",name:\"Greek\",cards:[{sideA:\"γεια σας\",sideB:\"Hello\"},{sideA:\"αντιο σας\",sideB:\"Goodbye\"}],sideB:\"English Translation\"},{sideA:\"Quote\",name:\"Quotes\",cards:[{sideA:\"Where is fancy bred? In the heart or in the road?\",sideB:\"Willy Wonka\"},{sideA:\"If the Good Lord had intended us to walk he wouldn't have inveted roller skates\",sideB:\"Willy Wonka\"}],sideB:\"Author\"},{sideA:\"Word\",name:\"Vocabulary\",cards:[{sideA:\"Idyll\",sideB:\"A short poem or prose piece depicting a rural or pastoral scene, usually in idealized terms\"},{sideA:\"Amorous\",sideB:\"Full of or strongly disposed to romantic love\"},{sideA:\"Dowager\",sideB:\"(1) A widow who holds a title or property derived from her deceased husband (2) an elderly woman of high social station\"},{sideA:\"Phalanx\",sideB:\"A compact or close-knit body of people\"},{sideA:\"Apropos\",sideB:\"Fitting and to the point\"},{sideA:\"Apropos\",sideB:\"Fitting and to the point\"},{sideA:\"Charabanc\",sideB:\"A bus typically used for sightseeing, originally open and pulled by horses\"},{sideA:\"Dacha\",sideB:\"A Russian country house or villa\"}],sideB:\"Definition\"}];","import decks from './decks.json';\n\nconst renderDeckList = () => {\n  const deckList = document.getElementById('content');\n\n  const row = document.createElement('div');\n  row.className = 'row';\n\n  deckList.appendChild(row);\n\n  decks.forEach(deck => {\n    const col = document.createElement('div');\n    col.className = 'col s12 m3';\n\n    row.appendChild(col);\n\n    const card = document.createElement('div');\n    card.className = 'card';\n\n    col.appendChild(card);\n\n    const content = document.createElement('div');\n    content.className = 'card-content';\n\n    card.appendChild(content);\n\n    const action = document.createElement('div');\n    action.className = 'card-action';\n\n    card.appendChild(action);\n\n    const title = document.createElement('span');\n    title.className = 'card-title';\n\n    title.appendChild(\n      document.createTextNode(deck.name)\n    );\n\n    content.appendChild(title);\n\n    const body = document.createElement('p');\n\n    body.appendChild(\n      document.createTextNode(`Side A: ${deck.sideA}, Side B: ${deck.sideB}`)\n    );\n\n    content.appendChild(body);\n\n    const actionLink = document.createElement('a');\n    actionLink.href = `/?deck=${deck.name}&side=a&card=0`;\n\n    action.appendChild(actionLink);\n\n    actionLink.appendChild(\n      document.createTextNode('Open Deck')\n    );\n  });\n};\n\nexport { renderDeckList };\n","import decks from './decks.json';\n\nconst renderCard = ({ deck, side, card }) => {\n  const [{ cards }] = decks.filter(({ name }) => name === deck);\n\n  const correctCard = cards[card];\n\n  const text = side === 'a' ? correctCard.sideA : correctCard.sideB;\n\n  const oppositeSide = side === 'a' ? 'b' : 'a';\n  const previousCard = card == 0 ? cards.length - 1 : card - 1;\n  const nextCard = card == cards.length - 1 ? 0 : card + 1;\n\n  const content = document.getElementById('content');\n\n  const row = document.createElement('div');\n  row.className = 'row';\n\n  content.appendChild(row);\n\n  const col = document.createElement('div');\n  col.className = 'col s12 m12';\n\n  row.appendChild(col);\n\n  const cardElem = document.createElement('div');\n  cardElem.className = 'card large';\n\n  col.appendChild(cardElem);\n\n  const cardContent = document.createElement('div');\n  cardContent.className = 'card-content';\n\n  cardElem.appendChild(cardContent);\n\n  const action = document.createElement('div');\n  action.className = 'card-action';\n\n  cardElem.appendChild(action);\n\n  const title = document.createElement('span');\n  title.className = 'card-title';\n\n  title.appendChild(\n    document.createTextNode(text)\n  );\n\n  cardContent.appendChild(title);\n\n  const flipLink = document.createElement('a');\n  flipLink.href = `/?deck=${deck}&side=${oppositeSide}&card=${card}`;\n\n  flipLink.appendChild(\n    document.createTextNode('Flip')\n  );\n\n  const previousLink = document.createElement('a');\n  previousLink.href = `/?deck=${deck}&side=a&card=${previousCard}`;\n\n  previousLink.appendChild(\n    document.createTextNode('Previous')\n  );\n\n  const nextLink = document.createElement('a');\n  nextLink.href = `/?deck=${deck}&side=a&card=${nextCard}`;\n\n  nextLink.appendChild(\n    document.createTextNode('Next')\n  );\n\n  action.appendChild(previousLink);\n  action.appendChild(flipLink);\n  action.appendChild(nextLink);\n\n};\n\nexport { renderCard };\n","import decks from './decks.json';\nimport { renderDeckList } from './deckList';\nimport { renderCard } from './card';\n\nwindow.addEventListener('DOMContentLoaded', event => {\n  const pieces = window.location.href.split('?');\n  const queryParams = (pieces[1] || '')\n    .split('&')\n    .map(pair => pair.split('='))\n    .reduce((res, [key, value]) => {\n      res[key] = value;\n      return res;\n    }, {});\n\n  if ('deck' in queryParams && 'side' in queryParams && 'card' in queryParams) {\n    renderCard({\n      deck: queryParams['deck'],\n      side: queryParams['side'],\n      card: parseInt(queryParams['card'])\n    });\n  } else {\n    renderDeckList();\n  }\n});\n"]}