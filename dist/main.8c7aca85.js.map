{"version":3,"sources":["js/decks.json","js/deckList.js","js/card.js","js/main.js"],"names":["module","exports","sideA","name","cards","sideB","renderDeckList","deckList","document","getElementById","row","createElement","className","appendChild","forEach","deck","col","card","content","action","title","createTextNode","body","openLink","href","openShuffledLink","renderShuffledCard","decks","filter","renderCard","side","Math","floor","random","length","mode","correctCard","text","oppositeSide","previousCard","nextCard","cardElem","cardContent","flipLink","previousLink","nextLink","window","addEventListener","event","pieces","queryParams","location","split","map","pair","reduce","res","key","value","parseInt"],"mappings":"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","file":"main.8c7aca85.js","sourceRoot":"..","sourcesContent":["module.exports=[{sideA:\"Greek Word\",name:\"Greek\",cards:[{sideA:\"γεια σας\",sideB:\"Hello\"},{sideA:\"αντιο σας\",sideB:\"Goodbye\"},{sideA:\"πατέρας\",sideB:\"Father\"},{sideA:\"μητέρα\",sideB:\"Mother\"}],sideB:\"English Translation\"},{sideA:\"Quote\",name:\"Quotes\",cards:[{sideA:\"Where is fancy bred? In the heart or in the road?\",sideB:\"Willy Wonka\"},{sideA:\"If the Good Lord had intended us to walk he wouldn't have inveted roller skates\",sideB:\"Willy Wonka\"}],sideB:\"Author\"},{sideA:\"Russian Word\",name:\"Russian\",cards:[{sideA:\"отец\",sideB:\"Father\"},{sideA:\"папа\",sideB:\"Dad\"},{sideA:\"мать\",sideB:\"Mother\"},{sideA:\"Мама\",sideB:\"Mom\"}],sideB:\"English Translation\"},{sideA:\"Word\",name:\"Vocabulary\",cards:[{sideA:\"Idyll\",sideB:\"A short poem or prose piece depicting a rural or pastoral scene, usually in idealized terms\"},{sideA:\"Amorous\",sideB:\"Full of or strongly disposed to romantic love\"},{sideA:\"Dowager\",sideB:\"(1) A widow who holds a title or property derived from her deceased husband (2) an elderly woman of high social station\"},{sideA:\"Phalanx\",sideB:\"A compact or close-knit body of people\"},{sideA:\"Apropos\",sideB:\"Fitting and to the point\"},{sideA:\"Charabanc\",sideB:\"A bus typically used for sightseeing, originally open and pulled by horses\"},{sideA:\"Dacha\",sideB:\"A Russian country house or villa\"}],sideB:\"Definition\"}];","import decks from './decks.json';\n\nconst renderDeckList = () => {\n  const deckList = document.getElementById('content');\n\n  const row = document.createElement('div');\n  row.className = 'row';\n\n  deckList.appendChild(row);\n\n  decks.forEach(deck => {\n    const col = document.createElement('div');\n    col.className = 'col s12 m3';\n\n    row.appendChild(col);\n\n    const card = document.createElement('div');\n    card.className = 'card';\n\n    col.appendChild(card);\n\n    const content = document.createElement('div');\n    content.className = 'card-content';\n\n    card.appendChild(content);\n\n    const action = document.createElement('div');\n    action.className = 'card-action';\n\n    card.appendChild(action);\n\n    const title = document.createElement('span');\n    title.className = 'card-title';\n\n    title.appendChild(\n      document.createTextNode(deck.name)\n    );\n\n    content.appendChild(title);\n\n    const body = document.createElement('p');\n\n    body.appendChild(\n      document.createTextNode(`Side A: ${deck.sideA}, Side B: ${deck.sideB}`)\n    );\n\n    content.appendChild(body);\n\n    const openLink = document.createElement('a');\n    openLink.href = `/?deck=${deck.name}&side=a&card=0`;\n\n    action.appendChild(openLink);\n\n    openLink.appendChild(\n      document.createTextNode('Open Deck')\n    );\n\n    const openShuffledLink = document.createElement('a');\n    openShuffledLink.href = `/?deck=${deck.name}&mode=shuffled`;\n\n    action.appendChild(openShuffledLink);\n\n    openShuffledLink.appendChild(\n      document.createTextNode('Open Shuffled Deck')\n    );\n  });\n};\n\nexport { renderDeckList };\n","import decks from './decks.json';\n\nconst renderShuffledCard  = ({ deck }) => {\n  const [{ cards }] = decks.filter(({ name }) => name === deck);\n\n  renderCard({\n    deck,\n    side: 'a',\n    card: Math.floor(Math.random() * cards.length),\n    mode: 'shuffled'\n  });\n}\n\nconst renderCard = ({ deck, side, card, mode }) => {\n  const [{ cards }] = decks.filter(({ name }) => name === deck);\n\n  const correctCard = cards[card];\n\n  const text = side === 'a' ? correctCard.sideA : correctCard.sideB;\n\n  const oppositeSide = side === 'a' ? 'b' : 'a';\n  const previousCard = card == 0 ? cards.length - 1 : card - 1;\n  const nextCard = card == cards.length - 1 ? 0 : card + 1;\n\n  const content = document.getElementById('content');\n\n  const row = document.createElement('div');\n  row.className = 'row';\n\n  content.appendChild(row);\n\n  const col = document.createElement('div');\n  col.className = 'col s12 m12';\n\n  row.appendChild(col);\n\n  const cardElem = document.createElement('div');\n  cardElem.className = 'card large';\n\n  col.appendChild(cardElem);\n\n  const cardContent = document.createElement('div');\n  cardContent.className = 'card-content';\n\n  cardElem.appendChild(cardContent);\n\n  const action = document.createElement('div');\n  action.className = 'card-action';\n\n  cardElem.appendChild(action);\n\n  const title = document.createElement('span');\n  title.className = 'card-title';\n\n  title.appendChild(\n    document.createTextNode(text)\n  );\n\n  cardContent.appendChild(title);\n\n  const flipLink = document.createElement('a');\n  flipLink.href =\n    mode === 'shuffled'\n      ? `/?deck=${deck}&side=${oppositeSide}&card=${card}&mode=shuffled`\n      : `/?deck=${deck}&side=${oppositeSide}&card=${card}`;\n\n  flipLink.appendChild(\n    document.createTextNode('Flip')\n  );\n\n  const previousLink = document.createElement('a');\n  previousLink.href = `/?deck=${deck}&side=a&card=${previousCard}`;\n\n  if (mode !== 'shuffled') {\n    previousLink.appendChild(\n      document.createTextNode('Previous')\n    );\n  }\n\n  const nextLink = document.createElement('a');\n  nextLink.href =\n    mode === 'shuffled'\n      ? `/?deck=${deck}&mode=shuffled`\n      : `/?deck=${deck}&side=a&card=${nextCard}`;\n\n  nextLink.appendChild(\n    document.createTextNode('Next')\n  );\n\n  action.appendChild(previousLink);\n  action.appendChild(flipLink);\n  action.appendChild(nextLink);\n};\n\nexport { renderCard, renderShuffledCard };\n","import decks from './decks.json';\nimport { renderDeckList } from './deckList';\nimport { renderCard, renderShuffledCard } from './card';\n\nwindow.addEventListener('DOMContentLoaded', event => {\n  const pieces = window.location.href.split('?');\n  const queryParams = (pieces[1] || '')\n    .split('&')\n    .map(pair => pair.split('='))\n    .reduce((res, [key, value]) => {\n      res[key] = value;\n      return res;\n    }, {});\n\n  if ('deck' in queryParams && 'side' in queryParams && 'card' in queryParams) {\n    renderCard({\n      deck: queryParams['deck'],\n      side: queryParams['side'],\n      card: parseInt(queryParams['card']),\n      mode: queryParams['mode']\n    });\n  } else if ('mode' in queryParams && queryParams['mode'] === 'shuffled') {\n    renderShuffledCard({\n      deck: queryParams['deck']\n    });\n  } else {\n    renderDeckList();\n  }\n});\n"]}